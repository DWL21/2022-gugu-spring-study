# 3장

의존이란 객체 간의 의존을 말한다. 객체가 다른 객체를 알고 있다면 의존한다고 할 수 있다. 의존할 경우 변경에 따른 영향이 ‘전파’된다.

<br/>
<hr/>

### 의존 객체를 내부에서 직접 생성
의존하는 객체가 있다면 그 객체를 구하는 방법이 필요하다. 가장 쉬운 방법은 의존하는 객체를 `내부에서 직접 생성`하는 것이다. 그러나 이 방법은 유지보수의 관점에서 문제가 있다.

## DI를 통한 의존 처리

DI는 의존하는 객체를 외부에서 전달받는 방식을 사용한다. 대표적인 DI 방법은 생성자를 통해 주입받는 것이다.

```java
public MemberService(MeberDao meberDao) {
    this.memberDao = meberDao;
}
```

### DI의 장점 : 변경의 유연함

객체를 내부에서 생성하지 않고 외부에서 주입받는다면 변경의 유연함을 얻을 수 있다. 주입받는 객체 타입을 상속받는 객체가 변경되어도 코드변경의 여파가 객체에까지 미치지 않는다.

### 조립기

스프링은 조립기 역할을 한다. 즉, 필요한 객체를 생성하고 주입하는 역할을 대신 해준다.

## DI 방식
1. 생성자 주입  
필요한 생성자를 주입받지 못했을 경우 NP 에러가 발생한다.
2. setter 주입  
필요한 생성자를 주입받지 못해도 프로그램이 실행된다. 그러나 객체를 사용하는 시점에 NP가 발생해 프로그램이 중단될 위험이 있다.



# 4장

## DI 관련 어노테이션

### @Autowired
클래스의 필드 위에 붙이면 스프링이 해당 타입의 빈을 찾아 주입한다. 만약 주입하려는 빈이 없다면 의존하는 객체의 메서드를 실행할때 NP가 발생할 것이다.

> 빈 생성자를 만들어줘야하는 이유는 뭘까?

### @Qualifier

주입 가능한 빈이 두개일 경우 어떤 빈을 주입할 지 정해줘야 한다. 이때 사용하는 것이 바로 `@Qualifier`이다. `@Qualifier`는 `@Bean`을 붙인 메서드에 사용할 수도 있고, setter 메서드에 사용할 수도 있다.
